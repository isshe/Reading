class Solution {
public:
    int NumberOf1Between1AndN_Solution(int n)
    {
        int Sum = 0;
		if (n <= 0)
        {
            return 0;
        }
        
        char strN[50];
        sprintf(strN, "%d", n); 		//漂亮
        
        Sum = numberOf1(strN);
        
        return Sum;
    }
    
    int numberOf1(char *strN)
    {
        if (strN == NULL || *strN < '0' || *strN > '9' || *strN == '\0')
        {
            return 0;
        }
        
        int firstBit = *strN - '\0'; 			//最高位
        unsigned int len = strlen(strN); 		//数据位数
        int firstDigit = 0; 					//最高位的1计数
        int otherDigit = 0; 					//除了最高位的计数
        int recursiveDigit = 0; 				//剩下部分递归计数
        
        //个位,个位中只有一个 1
        if (len == 1 && firstBit == 0)
        {
            return 0;
        }
        else if (len == 1 && firstBit > 0)
        {
            return 1;
        }
        
        //最高位大于1的时候，10^(位数-1)次方
        //最高位==1时， 是不要最高位的数值+1
        if (first > 1)
        {
            firstDigit = (int)pow(10, len-1);
        }
        else if (first == 1)
        {
            firstDigit = atoi(strN+1)+1; 			//strN+1 是把高位去掉
        }
        
        //除了最高位剩下所有位的1
        //first是最高位，len-1是剩余位数，上下的是任意组合，例如3位则10^3
        otherDigit = first * (len - 1) * pow(10, len-2);
        
        //剩下的部分，因为把数据分为两部分，例如 12345分为1-2345和2346-12345
        recursiveDigit = numberOf1(strN+1);
        
        return firstDigit + otherDigit + recursiveDigit;
    }
};
